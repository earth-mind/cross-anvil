name: release

on:
    push:
        tags:
            - "v*.*.*"
    schedule:
        - cron: "0 0 * * *"
    workflow_dispatch:

env:
    CARGO_TERM_COLOR: always

jobs:
    prepare:
        name: Prepare release
        runs-on: ubuntu-latest
        timeout-minutes: 30
        outputs:
            tag_name: ${{ steps.release_info.outputs.tag_name }}
            release_name: ${{ steps.release_info.outputs.release_name }}
            changelog: ${{ steps.build_changelog.outputs.changelog }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Compute release name and tag
              id: release_info
              run: |
                  echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
                  echo "release_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            
            - name: Build changelog
              id: build_changelog
              uses: mikepenz/release-changelog-builder-action@v4
              with:
                configuration: "./.github/changelog.json"
                fromTag: ''
                toTag: ${{ steps.release_info.outputs.tag_name }}
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    release:
        name: ${{ matrix.target }} (${{ matrix.runner }})
        runs-on: ${{ matrix.runner }}
        timeout-minutes: 240
        needs: prepare
        strategy:
            fail-fast: false
            matrix:
                include:
                    # Aquí se definen las plataformas y arquitecturas
                    # Ajusta según las necesidades de tu proyecto
                    - runner: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      svm_target_platform: linux-amd64
                      platform: linux
                      arch: amd64
                    - runner: macos-latest
                      target: x86_64-apple-darwin
                      svm_target_platform: macosx-amd64
                      platform: darwin
                      arch: amd64
                    - runner: windows-latest
                      target: x86_64-pc-windows-msvc
                      svm_target_platform: windows-amd64
                      platform: win32
                      arch: amd64
        steps:
            - uses: actions/checkout@v4
            - uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}
            - uses: Swatinem/rust-cache@v2
              with:
                  key: ${{ matrix.target }}
                  cache-on-failure: true

            - name: Build binaries
              env:
                  SVM_TARGET_PLATFORM: ${{ matrix.svm_target_platform }}
              shell: bash
              run: |
                set -eo pipefail
                target="${{ matrix.target }}"
                cargo build --release --bin cross-anvil --target "$target"
                bin=./target/$target/release/cross-anvil
                file "$bin" || true
                ldd "$bin" || true
                $bin --version || true
            
            - name: Archive binaries
              id: artifacts
              env:
                PLATFORM_NAME: ${{ matrix.platform }}
                TARGET: ${{ matrix.target }}
                ARCH: ${{ matrix.arch }}
                VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
              shell: bash
              run: |
                bin_name="cross-anvil_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}"
                if [[ "$PLATFORM_NAME" == "linux" ]] || [[ "$PLATFORM_NAME" == "darwin" ]]; then
                    tar -czvf "${bin_name}.tar.gz" -C ./target/${TARGET}/release cross-anvil
                    echo "file_name=${bin_name}.tar.gz" >> $GITHUB_OUTPUT
                else
                    cd ./target/${TARGET}/release
                    7z a -tzip "${bin_name}.zip" cross-anvil.exe
                    mv "${bin_name}.zip" ../../../
                    echo "file_name=${bin_name}.zip" >> $GITHUB_OUTPUT
                fi

            - name: Create release
              uses: softprops/action-gh-release@v1
              with:
                  name: ${{ needs.prepare.outputs.release_name }}
                  tag_name: ${{ needs.prepare.outputs.tag_name }}
                  body: ${{ needs.prepare.outputs.changelog }}
                  files: |
                      ${{ steps.artifacts.outputs.file_name }}
